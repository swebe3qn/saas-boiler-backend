const { Router } = require('express');
const axios = require('axios');
const { returnError } = require('../controllers/response');
const { getUserData } = require('../controllers/user');
const router = Router()
const { getAuth } = require('firebase-admin/auth');
const User = require('../models/user');
const stripe = require("stripe")(process.env.STRIPE_API_KEY);

router.post('/create', async (req, res, next) => {
  let user
  try { user = await getAuth().verifyIdToken(req.headers.authorization.split(' ')[1]) } catch(e) { }
  if (!user || !user.uid || !user.email) return returnError(res, 'Fehler beim Erstellen deines Kontos.')

  const stripeCustomerMatchesByEmail = await stripe.customers.list({
    email: user.email,
  });

  if (stripeCustomerMatchesByEmail.data.length > 0) return returnError(res, 'Fehler! Bitte wende dich an den Kundendienst. (Fehlercode: STRP0001)')

  let newStripeCustomer;
  try {
    newStripeCustomer = await stripe.customers.create({
      email: user.email,
      description: "Automatically generated by Wartify API",
      metadata: { auth_id: user.uid },
    });
  } catch(e) { console.log('Error during stripe create:', e) }

  if (!newStripeCustomer) return returnError(res, 'Fehler! Bitte wende dich an den Kundendienst. (Fehlercode: STRP0002)')

  let userData = {
    auth_id: user.uid,
    stripe_id: newStripeCustomer.id,
    email: user.email || '',
    name: user.email.split('@')[0],
  }

  User.create(userData, (err, user) => {
    if (err) return returnError(res, 'Fehler während dem Anlegen deines Kundenkontos. (Code: USR0001)')

    return res.status(200).json({
      success: true,
    })
  })
})

router.put('/me', async (req, res, next) => {
  let {name} = req.body

  if (!name) return returnError(res, 'Bitte gib einen Namen an.')

  let user = await getUserData(req.headers.authorization)
  if (!user || !user._id) return returnError(res, 'Fehler beim Abrufen der Benutzerdaten.')

  await User.findByIdAndUpdate(user._id, {name})

  return res.status(200).json({
    success: true,
  })
})

router.get('/', async (req, res, next) => {
  let user = await getUserData(req.headers.authorization)
  if (!user || !user._id) return returnError(res, 'Fehler beim Abrufen der Benutzerdaten.')

  return res.status(200).json({
    success: true,
    message: '',
    data: user.subscriptions || [],
    user
  })
})

module.exports = router